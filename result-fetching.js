/* result-fetching.js
 * –†–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ API ‚Üí —è–∫—â–æ –Ω–µ–≤–¥–∞—á–∞, –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –†–ê–ù–î–û–ú–ù–Ü –¥–∞–Ω—ñ –µ–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–∏.
 * –¢–∞–∫–æ–∂ –≤–±—É–¥–æ–≤—É—î–º–æ exoplanet.html —á–µ—Ä–µ–∑ iframe –ø—ñ–¥ —Ç–∞–±–ª–∏—Ü–µ—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
 * —ñ –∞–≤—Ç–æ–ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–∏—Å–æ—Ç—É iframe, —â–æ–± –∫–∞–Ω–≤–∞—Å –Ω–µ ¬´–≤–∏–ª–∞–∑–∏–≤¬ª –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
 *
 * –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ index.html:
 *  - –°—Ç–∞–Ω–∏/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏: #waitingState, #waitingTimestamp, #resultsDisplay, #timeoutState (–æ–ø—Ü—ñ–π–Ω–æ)
 *  - –ü–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:  #resultPercent, #result_object_id, #result_planet_radius,
 *                      #result_semi_major_axis, #result_eq_temperature, (–æ–ø—Ü—ñ–π–Ω–æ #result_orbital_period)
 *  - –ö–∞–Ω–≤–∞—Å-—Å–µ–∫—Ü—ñ—è:    <div id="exoplanetSection" style="display:none"><iframe id="exoplanetFrame"></iframe></div>
 */

(() => {
  // =========================
  // –ö–æ–Ω—Ñ—ñ–≥
  // =========================
  const POLLING_CONFIG = {
    MAX_POLL_DURATION: 120000, // 2 —Ö–≤ –Ω–∞ –≤–µ—Å—å —Ü–∏–∫–ª
    POLL_INTERVAL: 5000,       // 5 —Å –º—ñ–∂ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è–º–∏
    FETCH_TIMEOUT: 15000,      // 15 —Å —Ç–∞–π–º–∞—É—Ç –æ–∫—Ä–µ–º–æ–≥–æ –∑–∞–ø–∏—Ç—É
    API_BASE: "https://sophia-nasa-ml-app-7bc530f3ab97.herokuapp.com",
  };

  let pollInterval = null;
  let pollStartTime = null;

  // =========================
  // –£—Ç–∏–ª—ñ—Ç–∏
  // =========================
  const $ = (id) => document.getElementById(id);
  const safe = (fn, ...args) => { try { return fn?.(...args); } catch {} };

  const toNum = (v) => {
    if (v === null || v === undefined) return NaN;
    const n = Number(String(v).replace(/[^\d.\-+eE]/g, ""));
    return Number.isFinite(n) ? n : NaN;
  };

  const fmt = (n, d = 2) =>
    Number.isFinite(n)
      ? new Intl.NumberFormat(undefined, { maximumFractionDigits: d }).format(n)
      : "";

  const humanTime = (ms) => {
    const s = Math.floor(ms / 1000);
    const m = Math.floor(s / 60);
    return `${m}m ${s % 60}s`;
  };

  async function tryFetch(url, opts = {}, timeoutMs = POLLING_CONFIG.FETCH_TIMEOUT) {
    return await Promise.race([
      fetch(url, opts),
      new Promise((_, rej) => setTimeout(() => rej(new Error("Fetch timeout")), timeoutMs)),
    ]);
  }

  // =========================
  // UI helpers
  // =========================
  function showWaitingState(analysisId) {
    const waiting = $("waitingState");
    const results = $("resultsDisplay");
    const timeout = $("timeoutState");
    if (waiting) waiting.style.display = "block";
    if (results) results.style.display = "none";
    if (timeout) timeout.style.display = "none";
    safe(window.setSubmittingState, true);
    updateWaitingTime(0);
    console.log(`‚è≥ Waiting for analysis: ${analysisId}`);
  }

  function hideWaitingState() {
    const waiting = $("waitingState");
    if (waiting) waiting.style.display = "none";
    safe(window.setSubmittingState, false);
  }

  function updateWaitingTime(elapsed) {
    const ts = $("waitingTimestamp");
    if (ts) ts.textContent = `Analyzing‚Ä¶ ${humanTime(elapsed)} (server processing)`;
  }

  // –Ø–∫—â–æ –≤—Å–µ –∂ —Ö–æ—á–µ—à –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ç–∞–π–º–∞—É—Ç-–µ–∫—Ä–∞–Ω ‚Äî –ª–∏—à–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é,
  // –∞–ª–µ –≤ –Ω–∞—à—ñ–π –ª–æ–≥—ñ—Ü—ñ –º–∏ –≤—ñ–¥–¥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–≥—É –º–∏—Ç—Ç—î–≤–æ–º—É —Ä–∞–Ω–¥–æ–º-—Ñ–æ–ª–±–µ–∫—É.
  function showTimeoutState() {
    const timeoutState = $("timeoutState");
    const waitingState = $("waitingState");
    if (waitingState) waitingState.style.display = "none";
    if (timeoutState) timeoutState.style.display = "block";
    safe(window.setSubmittingState, false);
  }

function generateRandomPlanet(seedStr = "") {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
  function getRandom() {
    const array = new Uint32Array(1);
    window.crypto.getRandomValues(array);
    return array[0] / (0xFFFFFFFF + 1);
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è
  const planetRadius = (0.5 + getRandom() * 5.5).toFixed(2); // 0.5-6.0 R‚äï
  const semiMajorAxis = (0.01 + getRandom() * 1.99).toFixed(4); // 0.01-2.0 AU
  const baseTemp = 1400 / (parseFloat(semiMajorAxis) + 0.1);
  const tempVariation = (getRandom() - 0.5) * 400;
  const eqTemperature = Math.round(Math.max(500, Math.min(2000, baseTemp + tempVariation)));

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏
  const percent = (60 + getRandom() * 35).toFixed(1); // 60-95%
  const objectId = `TIC-${Math.floor(1000000 + getRandom() * 9000000)}`;

  return {
    object_id: objectId,
    percent: percent,
    planet_radius: planetRadius,
    semi_major_axis: semiMajorAxis,
    eq_temperature: eqTemperature,
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    planet_type: "Exoplanet",
    confidence: "medium",
    habitability_score: 0,
    orbital_period: (Math.sqrt(Math.pow(parseFloat(semiMajorAxis), 3)) * 365).toFixed(1),
    orbital_eccentricity: (getRandom() * 0.3).toFixed(3),
  };
}


  // =========================
  // EXOPLANET iframe (–∫–∞–Ω–≤–∞—Å)
  // =========================
  function sizeExoplanetFrame() {
    const frame = $("exoplanetFrame");
    if (!frame) return;
    const h = Math.max(420, Math.floor(window.innerHeight * 0.65));
    frame.style.height = `${h}px`;
    frame.style.width = "100%";
    frame.style.display = "block";
  }

  function showExoplanetCanvas(result) {
    const sec = $("exoplanetSection");
    const frame = $("exoplanetFrame");
    if (!sec || !frame) return;

    const params = new URLSearchParams();
    if (Number.isFinite(result.planet_radius)) params.set("radius", result.planet_radius);
    if (Number.isFinite(result.semi_major_axis)) {
      params.set("avgDist", result.semi_major_axis);
      params.set("transitDist", result.semi_major_axis);
    }
    if (Number.isFinite(result.eq_temperature)) params.set("temp", result.eq_temperature);
    if (Number.isFinite(result.orbital_period)) params.set("period", result.orbital_period);

    const url = "exoplanet.html" + (params.toString() ? `?${params.toString()}` : "");
    if (frame.getAttribute("src") !== url) frame.setAttribute("src", url);

    sec.style.display = "block";
    sizeExoplanetFrame();
  }

  // =========================
  // –í—ñ–¥–º–∞–ª—å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  // =========================
  function displayResults(result) {
    const waiting = $("waitingState");
    if (waiting) waiting.style.display = "none";
    const results = $("resultsDisplay");
    if (results) results.style.display = "block";

    const set = (id, text) => { const el = $(id); if (el) el.textContent = text; };

    const percent = result.percent ?? result.score_percent ?? "";
    const objectId = result.object_id ?? result.tic_id ?? result.id ?? "‚Äî";
    const radius = toNum(result.planet_radius);
    const a = toNum(result.semi_major_axis);
    const temp = toNum(result.eq_temperature);
    const period = toNum(result.orbital_period);

    set("result_object_id", String(objectId));
    set("resultPercent", Number.isFinite(percent) ? `${percent}%` : String(percent || "‚Äî"));
    if (Number.isFinite(radius)) set("result_planet_radius", `${fmt(radius, 2)} R‚äï`);
    if (Number.isFinite(a)) set("result_semi_major_axis", `${fmt(a, 3)} AU`);
    if (Number.isFinite(temp)) set("result_eq_temperature", `${fmt(temp, 0)} K`);
    if (Number.isFinite(period) && $("result_orbital_period")) {
      set("result_orbital_period", `${fmt(period, 1)} d`);
    }

    safe(window.setSubmittingState, false);
    showExoplanetCanvas({ planet_radius: radius, semi_major_axis: a, eq_temperature: temp, orbital_period: period });

    // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–ª—è —ñ–Ω—à–∏—Ö —Å–ª—É—Ö–∞—á—ñ–≤
    try { document.dispatchEvent(new CustomEvent("analysis:complete", { detail: result })); } catch {}
  }

  // =========================
  // –ü–æ–ª—ñ–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  // (–±—É–¥—å-—è–∫–∞ –Ω–µ–≤–¥–∞—á–∞ ‚Üí –º–∏—Ç—Ç—î–≤–∏–π —Ä–∞–Ω–¥–æ–º —ñ –∑—É–ø–∏–Ω–∫–∞ –ø–æ–ª—ñ–Ω–≥—É)
  // =========================
  function stopPolling() {
    if (pollInterval) {
      clearInterval(pollInterval);
      pollInterval = null;
    }
  }

  function startPolling(analysisId) {
    console.log(`üöÄ Start analysis for: ${analysisId}`);
    pollStartTime = Date.now();
    let attempt = 0;

    // –Ø–∫—â–æ –æ—Ñ–ª–∞–π–Ω ‚Äî –≤—ñ–¥—Ä–∞–∑—É —Ä–∞–Ω–¥–æ–º
    if (typeof navigator !== "undefined" && navigator.onLine === false) {
      console.warn("üåê Offline ‚Äî showing random exoplanet data");
      hideWaitingState();
      displayResults(generateRandomPlanet(String(analysisId || "")));
      return;
    }

    showWaitingState(analysisId);

    const poll = async () => {
      const elapsed = Date.now() - pollStartTime;
      attempt++;

      if (elapsed > POLLING_CONFIG.MAX_POLL_DURATION) {
        console.log("‚è∞ Max poll duration reached ‚Äî fallback to random");
        stopPolling();
        hideWaitingState();
        displayResults(generateRandomPlanet(String(analysisId || "")));
        return;
      }

      try {
        console.log(`üîç Poll attempt ${attempt}`);
        const res = await tryFetch(
          `${POLLING_CONFIG.API_BASE}/analysis/${encodeURIComponent(analysisId)}`,
          { method: "GET" },
          POLLING_CONFIG.FETCH_TIMEOUT
        );

        if (res.status === 202) {
          updateWaitingTime(elapsed);
          return; // —â–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è ‚Äî —á–µ–∫–∞—î–º–æ –¥–∞–ª—ñ
        }

        if (res.status === 200) {
          const body = await res.json();
          if (body?.status === "completed" && body?.data) {
            console.log("‚úÖ Analysis complete");
            stopPolling();
            hideWaitingState();
            displayResults(body.data);
            return;
          }
          if (body?.status === "error") {
            throw new Error(body.message || "Analysis failed");
          }
          // —è–∫—â–æ 200, –∞–ª–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ç–∞ ‚Äî –≤–≤–∞–∂–∞—î–º–æ –Ω–µ–≤–¥–∞—á–µ—é
          throw new Error("Unexpected API response");
        }

        // 4xx/5xx ‚Üí –Ω–µ–≤–¥–∞—á–∞
        throw new Error(`HTTP ${res.status}`);
      } catch (err) {
        console.error("‚ùå Polling error:", err);
        // –ë—É–¥—å-—è–∫–∞ –Ω–µ–≤–¥–∞—á–∞ ‚Üí –≤—ñ–¥—Ä–∞–∑—É —Ä–∞–Ω–¥–æ–º —ñ —Å—Ç–æ–ø
        stopPolling();
        hideWaitingState();
        displayResults(generateRandomPlanet(String(analysisId || "")));
      }
    };

    // –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ + —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    poll();
    pollInterval = setInterval(poll, POLLING_CONFIG.POLL_INTERVAL);
  }

  // =========================
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
  // =========================
  document.addEventListener("DOMContentLoaded", () => {
    console.log("üéØ Planet Analysis UI ready");
    console.log(`üåê API base: ${POLLING_CONFIG.API_BASE}`);
    window.addEventListener("resize", sizeExoplanetFrame);
  });

  // –ï–∫—Å–ø–æ—Ä—Ç —É –≥–ª–æ–±–∞–ª (—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º)
  window.startPolling = startPolling;
  window.stopPolling = stopPolling;
  window.displayResults = displayResults;
  window.showTimeoutState = showTimeoutState;
  window.updateWaitingTime = updateWaitingTime;
})();




